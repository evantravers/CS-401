Source Program
--------------

// Test6.scala

// Two recursive functions operating on lists.

object Test6 {

  def cons_a_list (r : Int, l : List [Int]) : List [Int] =
  {
    var my_list : List [Int] = Nil;
    if (r != 0) {
      my_list = r :: my_list;
      my_list = cons_a_list (r - 1, my_list);
    }
    return my_list;
  }

  def equal (list1 : List [Int], list2 : List [Int]) : Int =
  {
    var l1 : List [Int] = Nil;
    var l2 : List [Int] = Nil;
    var my_flag : Int = 0;
    l1 = list1; l2 = list2;
    while (!l1 . isEmpty && !l2 . isEmpty && my_flag == 0) {
      if (l1 . head != l2 . head)
        my_flag=1;
      else {
        l1 = l1 . tail;
        l2 = l2 . tail;
        my_flag = equal (l1, l2);
      }
    }
    if (l1 . isEmpty && l2 . isEmpty)
      my_flag = 0;
    else
      my_flag = 1;
    return my_flag;
  }

  def main (args : Array [String])
  {
    var r : Int = 0; 
    var h : Int = 0;
    var l1 : List [Int] = Nil; 
    var l2 : List [Int] = Nil; 
    var l3 : List [Int] = Nil;
    var my_list : List [Int] = Nil;
    r = 10;
    l1 = cons_a_list (r, my_list);    
    l2 = cons_a_list (r, my_list);  
    r = r - 1;  
    l3 = cons_a_list (r, my_list);  
    if (equal (l1, l2) == 0)
      h = 1; 
    else 
      h = 0;
    if (equal (l1, l3) != 0) 
      r = 1;
    else 
      r = 0;
    println (h);
    println (r);
  }

}


List of Tokens
--------------

(keyword, object) 
(identifier, Test6) 
(punctuation, {) 
(keyword, def) 
(identifier, cons_a_list) 
(punctuation, () 
(identifier, r) 
(punctuation, :) 
(keyword, int)
(punctuation, ,) 
(identifier, l) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(punctuation, )) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(punctuation, {) 
(keyword, var)
(identifier, my_list) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, if)
(punctuation, () 
(identifier, r) 
(operator, !=) 
(integer, 0) 
(punctuation, )) 
(punctuation, {) 
(identifier, my_list) 
(operator, =) 
(identifier, r) 
(punctuation, :) 
(punctuation, :) 
(identifier, my_list) 
(punctuation, ;) 
(identifier, my_list) 
(operator, =) 
(identifier, cons_a_list) 
(punctuation, () 
(identifier, r) 
(operator, -) 
(integer, 1) 
(punctuation, ,) 
(identifier, my_list) 
(punctuation, )) 
(punctuation, ;) 
(punctuation, }) 
(keyword, return)
(identifier, my_list) 
(punctuation, ;) 
(punctuation, }) 
(keyword, def) 
(identifier, equal) 
(punctuation, () 
(identifier, list1) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(punctuation, ,) 
(identifier, list2) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(punctuation, )) 
(punctuation, :) 
(keyword, int)
(operator, =) 
(punctuation, {) 
(keyword, var)
(identifier, l1) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, var)
(identifier, l2) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, var)
(identifier, my_flag) 
(punctuation, :) 
(keyword, int)
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(identifier, l1) 
(operator, =) 
(identifier, list1) 
(punctuation, ;) 
(identifier, l2) 
(operator, =) 
(identifier, list2) 
(punctuation, ;) 
(keyword, while)
(punctuation, () 
(operator, !) 
(identifier, l1) 
(punctuation, .) 
(identifier, isEmpty) 
(operator, &&) 
(operator, !) 
(identifier, l2) 
(punctuation, .) 
(identifier, isEmpty) 
(operator, &&) 
(identifier, my_flag) 
(operator, ==) 
(integer, 0) 
(punctuation, )) 
(punctuation, {) 
(keyword, if)
(punctuation, () 
(identifier, l1) 
(punctuation, .) 
(identifier, head) 
(operator, !=) 
(identifier, l2) 
(punctuation, .) 
(identifier, head) 
(punctuation, )) 
(identifier, my_flag) 
(operator, =) 
(integer, 1) 
(punctuation, ;) 
(keyword, else)
(punctuation, {) 
(identifier, l1) 
(operator, =) 
(identifier, l1) 
(punctuation, .) 
(identifier, tail) 
(punctuation, ;) 
(identifier, l2) 
(operator, =) 
(identifier, l2) 
(punctuation, .) 
(identifier, tail) 
(punctuation, ;) 
(identifier, my_flag) 
(operator, =) 
(identifier, equal) 
(punctuation, () 
(identifier, l1) 
(punctuation, ,) 
(identifier, l2) 
(punctuation, )) 
(punctuation, ;) 
(punctuation, }) 
(punctuation, }) 
(keyword, if)
(punctuation, () 
(identifier, l1) 
(punctuation, .) 
(identifier, isEmpty) 
(operator, &&) 
(identifier, l2) 
(punctuation, .) 
(identifier, isEmpty) 
(punctuation, )) 
(identifier, my_flag) 
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(keyword, else)
(identifier, my_flag) 
(operator, =) 
(integer, 1) 
(punctuation, ;) 
(keyword, return)
(identifier, my_flag) 
(punctuation, ;) 
(punctuation, }) 
(keyword, def) 
(keyword, main)
(punctuation, () 
(keyword, args)
(punctuation, :) 
(identifier, Array) 
(punctuation, [) 
(keyword, string)
(punctuation, ]) 
(punctuation, )) 
(punctuation, {) 
(keyword, var)
(identifier, r) 
(punctuation, :) 
(keyword, int)
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(keyword, var)
(identifier, h) 
(punctuation, :) 
(keyword, int)
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(keyword, var)
(identifier, l1) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, var)
(identifier, l2) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, var)
(identifier, l3) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(keyword, var)
(identifier, my_list) 
(punctuation, :) 
(keyword, list)
(punctuation, [) 
(keyword, int)
(punctuation, ]) 
(operator, =) 
(identifier, Nil) 
(punctuation, ;) 
(identifier, r) 
(operator, =) 
(integer, 10) 
(punctuation, ;) 
(identifier, l1) 
(operator, =) 
(identifier, cons_a_list) 
(punctuation, () 
(identifier, r) 
(punctuation, ,) 
(identifier, my_list) 
(punctuation, )) 
(punctuation, ;) 
(identifier, l2) 
(operator, =) 
(identifier, cons_a_list) 
(punctuation, () 
(identifier, r) 
(punctuation, ,) 
(identifier, my_list) 
(punctuation, )) 
(punctuation, ;) 
(identifier, r) 
(operator, =) 
(identifier, r) 
(operator, -) 
(integer, 1) 
(punctuation, ;) 
(identifier, l3) 
(operator, =) 
(identifier, cons_a_list) 
(punctuation, () 
(identifier, r) 
(punctuation, ,) 
(identifier, my_list) 
(punctuation, )) 
(punctuation, ;) 
(keyword, if)
(punctuation, () 
(identifier, equal) 
(punctuation, () 
(identifier, l1) 
(punctuation, ,) 
(identifier, l2) 
(punctuation, )) 
(operator, ==) 
(integer, 0) 
(punctuation, )) 
(identifier, h) 
(operator, =) 
(integer, 1) 
(punctuation, ;) 
(keyword, else)
(identifier, h) 
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(keyword, if)
(punctuation, () 
(identifier, equal) 
(punctuation, () 
(identifier, l1) 
(punctuation, ,) 
(identifier, l3) 
(punctuation, )) 
(operator, !=) 
(integer, 0) 
(punctuation, )) 
(identifier, r) 
(operator, =) 
(integer, 1) 
(punctuation, ;) 
(keyword, else)
(identifier, r) 
(operator, =) 
(integer, 0) 
(punctuation, ;) 
(keyword, println)
(punctuation, () 
(identifier, h) 
(punctuation, )) 
(punctuation, ;) 
(keyword, println)
(punctuation, () 
(identifier, r) 
(punctuation, )) 
(punctuation, ;) 
(punctuation, }) 
(punctuation, }) 

